#Verson Kivy 
#pip install kivy
#Versión mejorada. al presionar la tecla esc se para el script.
#Por David Ruiz
#Puedes usar mi script siempre y cuando me des créditos en mis redes sociales @viajatech
#Simulador de ataques de fuerza bruta con múltiples combinaciones 








import itertools
import string
import time
from threading import Thread, Event
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.textinput import TextInput
from kivy.uix.label import Label
from kivy.uix.progressbar import ProgressBar
from kivy.clock import Clock
from kivy.core.window import Window
from kivy.graphics import Color, Rectangle
from kivy.uix.popup import Popup
from kivy.uix.filechooser import FileChooserListView

class BruteForceLogic:
    def __init__(self):
        self.diccionario = []
        self.detener_evento = Event()

    def verificar_contraseña(self, contrasena_intento, contrasena_real):
        return contrasena_intento == contrasena_real

    def generar_contraseñas(self, longitud):
        caracteres = string.ascii_letters + string.digits + string.punctuation
        for contrasena in itertools.product(caracteres, repeat=longitud):
            yield ''.join(contrasena)

    def cargar_diccionario(self, file_path):
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
            self.diccionario = file.read().splitlines()

    def iniciar_ataque(self, contrasena_real, callback):
        inicio = time.time()
        encontrada = False
        longitud_maxima = 8
        contador = 0

        # Intentar con el diccionario primero
        for contrasena_intento in self.diccionario:
            if self.detener_evento.is_set():
                break
            contador += 1
            if self.verificar_contraseña(contrasena_intento, contrasena_real):
                encontrada = True
                callback(f"Contraseña encontrada: {contrasena_intento}", True, contador)
                return
            if contador % 1000 == 0:  # Actualizar cada 1000 intentos
                callback(f"Intentos: {contador}, Tiempo: {time.time() - inicio:.2f}s", False, contador)

        # Si no se encuentra en el diccionario, usar fuerza bruta
        if not encontrada:
            for longitud in range(1, longitud_maxima + 1):
                for contrasena_intento in self.generar_contraseñas(longitud):
                    if self.detener_evento.is_set():
                        break
                    contador += 1
                    if self.verificar_contraseña(contrasena_intento, contrasena_real):
                        encontrada = True
                        callback(f"Contraseña encontrada: {contrasena_intento}", True, contador)
                        return
                    if contador % 1000 == 0:  # Actualizar cada 1000 intentos
                        callback(f"Intentos: {contador}, Tiempo: {time.time() - inicio:.2f}s", False, contador)
                if encontrada:
                    break

        fin = time.time()
        callback(f"Contraseña no encontrada. Tiempo total: {fin - inicio:.2f}s\nTotal intentos: {contador}", True, contador)

class CyberpunkBruteForceApp(App):
    def build(self):
        self.logic = BruteForceLogic()
        Window.clearcolor = (0.05, 0.05, 0.1, 1)  # Fondo oscuro

        layout = BoxLayout(orientation='vertical', padding=20, spacing=10)
        with layout.canvas.before:
            Color(0.1, 0.1, 0.2, 1)  # Color de fondo cyberpunk
            self.rect = Rectangle(size=layout.size, pos=layout.pos)
        layout.bind(size=self._update_rect, pos=self._update_rect)

        self.password_input = TextInput(
            hint_text='Ingresa la contraseña a descifrar',
            multiline=False,
            background_color=(0.2, 0.2, 0.3, 1),
            foreground_color=(0, 1, 0.7, 1),  # Color de texto cyan neón
            cursor_color=(0, 1, 0.7, 1)
        )
        layout.add_widget(self.password_input)

        buttons_layout = BoxLayout(spacing=10, size_hint_y=None, height=50)
        
        self.start_button = Button(
            text='Iniciar Ataque',
            background_color=(1, 0.1, 0.1, 1),  # Rojo neón
            color=(1, 1, 1, 1)
        )
        self.start_button.bind(on_press=self.iniciar_ataque)
        buttons_layout.add_widget(self.start_button)

        self.load_button = Button(
            text='Cargar Diccionario',
            background_color=(0.1, 0.8, 0.1, 1),  # Verde neón
            color=(1, 1, 1, 1)
        )
        self.load_button.bind(on_press=self.mostrar_selector_archivos)
        buttons_layout.add_widget(self.load_button)

        layout.add_widget(buttons_layout)

        self.progress_bar = ProgressBar(max=100, value=0)
        layout.add_widget(self.progress_bar)

        self.result_label = Label(
            text='Esperando inicio...',
            color=(0, 1, 0.7, 1)  # Color cyan neón
        )
        layout.add_widget(self.result_label)

        self.attempts_label = Label(
            text='Intentos: 0',
            color=(0, 1, 0.7, 1)  # Color cyan neón
        )
        layout.add_widget(self.attempts_label)

        self.dictionary_label = Label(
            text='Diccionario: No cargado',
            color=(0, 1, 0.7, 1)  # Color cyan neón
        )
        layout.add_widget(self.dictionary_label)

        footer = Label(
            text='powered by viaja tech',
            color=(0.5, 0.5, 0.5, 1),
            size_hint_y=None,
            height=30
        )
        layout.add_widget(footer)

        Window.bind(on_key_down=self.on_key_down)

        return layout

    def _update_rect(self, instance, value):
        self.rect.pos = instance.pos
        self.rect.size = instance.size

    def iniciar_ataque(self, instance):
        contrasena_real = self.password_input.text
        if contrasena_real:
            self.logic.detener_evento.clear()
            self.start_button.disabled = True
            Thread(target=self.logic.iniciar_ataque, args=(contrasena_real, self.update_ui)).start()
        else:
            self.result_label.text = "Por favor, ingresa una contraseña."

    def mostrar_selector_archivos(self, instance):
        content = BoxLayout(orientation='vertical')
        self.file_chooser = FileChooserListView(filters=['*.txt'])
        content.add_widget(self.file_chooser)

        select_button = Button(text='Seleccionar', size_hint_y=None, height=50)
        select_button.bind(on_release=self.load_dictionary)
        content.add_widget(select_button)

        self.popup = Popup(title="Seleccionar Diccionario", content=content, size_hint=(0.9, 0.9))
        self.popup.open()

    def load_dictionary(self, instance):
        selection = self.file_chooser.selection
        if selection:
            try:
                self.logic.cargar_diccionario(selection[0])
                self.dictionary_label.text = f"Diccionario: {selection[0]} ({len(self.logic.diccionario)} palabras)"
                self.result_label.text = f"Se han cargado {len(self.logic.diccionario)} contraseñas del diccionario."
                self.popup.dismiss()
            except Exception as e:
                self.result_label.text = f"Error al cargar el diccionario: {str(e)}"
        else:
            self.result_label.text = "No se seleccionó ningún archivo."

    def update_ui(self, message, finished, contador):
        def update(dt):
            self.result_label.text = message
            self.attempts_label.text = f"Intentos: {contador}"
            if not finished:
                self.progress_bar.value = (self.progress_bar.value + 1) % 100
            else:
                self.progress_bar.value = 100
                self.start_button.disabled = False
        Clock.schedule_once(update, 0)

    def on_key_down(self, instance, keyboard, keycode, text, modifiers):
        if keycode == 27:  # 27 es el código para la tecla Esc
            self.detener()

    def detener(self):
        self.logic.detener_evento.set()
        self.result_label.text = "El ataque de fuerza bruta se ha detenido por el usuario."
        self.start_button.disabled = False

if __name__ == '__main__':
    CyberpunkBruteForceApp().run()
